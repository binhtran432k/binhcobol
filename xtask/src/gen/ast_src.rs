//! Defines input for code generation process.

pub(crate) struct KindsSrc<'a> {
    pub(crate) punct: &'a [(&'a str, &'a str)],
    pub(crate) reserved_words: &'a [&'a str],
    pub(crate) standard_only_words: &'a [&'a str],
    pub(crate) potential_reserved_words: &'a [&'a str],
    pub(crate) contextual_keywords: &'a [&'a str],
    pub(crate) literals: &'a [&'a str],
    pub(crate) tokens: &'a [&'a str],
    pub(crate) nodes: &'a [&'a str],
}

pub(crate) const KINDS_SRC: KindsSrc<'_> = KindsSrc {
    punct: &[
        ("+", "PLUS"),
        ("-", "MINUS"),
        ("*", "STAR"),
        ("**", "STAR2"),
        ("/", "SLASH"),
        ("=", "EQ"),
        ("==", "EQ2"),
        ("<=", "LTEQ"),
        (">=", "GTEQ"),
        ("<>", "LTGT"),
        ("*>", "STAR_GT"),
        (">>", "GTGT"),
        ("$", "DOLLAR"),
        (",", "COMMA"),
        (";", "SEMICOLON"),
        (".", "DOT"),
        ("(", "L_PAREN"),
        (")", "R_PAREN"),
        ("<", "L_ANGLE"),
        (">", "R_ANGLE"),
        (":", "COLON"),
    ],
    reserved_words: &[
        "accept",
        "access",
        "add",
        "address",
        "advancing",
        "after",
        "all",
        "allocate",
        "alphabet",
        "alphabetic",
        "alphabetic-lower",
        "alphabetic-upper",
        "alphanumeric",
        "alphanumeric-edited",
        "also",
        "alter",
        "alternate",
        "and",
        "any",
        "apply",
        "are",
        "area",
        "areas",
        "ascending",
        "assign",
        "at",
        "author",
        "basis",
        "before",
        "beginning",
        "binary",
        "blank",
        "block",
        "bottom",
        "by",
        "byte-length",
        "call",
        "cancel",
        "cbl",
        "character",
        "characters",
        "class",
        "class-id",
        "close",
        "cobol",
        "code",
        "code-set",
        "collating",
        "com-reg",
        "comma",
        "common",
        "comp",
        "comp-1",
        "comp-2",
        "comp-3",
        "comp-4",
        "comp-5",
        "computational",
        "computational-1",
        "computational-2",
        "computational-3",
        "computational-4",
        "computational-5",
        "compute",
        "configuration",
        "contains",
        "content",
        "continue",
        "converting",
        "copy",
        "corr",
        "corresponding",
        "count",
        "currency",
        "data",
        "date",
        "date-compiled",
        "date-written",
        "day",
        "day-of-week",
        "dbcs",
        "debug-contents",
        "debug-item",
        "debug-line",
        "debug-name",
        "debug-sub-1",
        "debug-sub-2",
        "debug-sub-3",
        "debugging",
        "decimal-point",
        "declaratives",
        "default",
        "delete",
        "delimited",
        "delimiter",
        "depending",
        "descending",
        "display",
        "display-1",
        "divide",
        "division",
        "down",
        "duplicates",
        "dynamic",
        "egcs",
        "eject",
        "else",
        "end",
        "end-add",
        "end-call",
        "end-compute",
        "end-delete",
        "end-divide",
        "end-evaluate",
        "end-exec",
        "end-if",
        "end-invoke",
        "end-json",
        "end-multiply",
        "end-of-page",
        "end-perform",
        "end-read",
        "end-return",
        "end-rewrite",
        "end-search",
        "end-start",
        "end-string",
        "end-subtract",
        "end-unstring",
        "end-write",
        "end-xml",
        "ending",
        "enter",
        "entry",
        "environment",
        "eop",
        "equal",
        "error",
        "evaluate",
        "every",
        "exception",
        "exec",
        "execute",
        "exit",
        "extend",
        "external",
        "factory",
        "false",
        "fd",
        "file",
        "file-control",
        "filler",
        "first",
        "footing",
        "for",
        "free",
        "from",
        "function",
        "function-pointer",
        "generate",
        "giving",
        "global",
        "go",
        "goback",
        "greater",
        "group-usage",
        "high-value",
        "high-values",
        "i-o",
        "i-o-control",
        "id",
        "identification",
        "if",
        "in",
        "index",
        "indexed",
        "inherits",
        "initial",
        "initialize",
        "input",
        "input-output",
        "insert",
        "inspect",
        "installation",
        "into",
        "invalid",
        "invoke",
        "is",
        "java",
        "jnienvptr",
        "json",
        "json-code",
        "json-status",
        "just",
        "justified",
        "kanji",
        "key",
        "label",
        "leading",
        "left",
        "length",
        "less",
        "limit",
        "linage",
        "linage-counter",
        "line",
        "lines",
        "linkage",
        "local-storage",
        "lock",
        "low-value",
        "low-values",
        "memory",
        "merge",
        "method",
        "method-id",
        "mode",
        "modules",
        "more-labels",
        "move",
        "multiple",
        "multiply",
        "national",
        "national-edited",
        "native",
        "negative",
        "next",
        "no",
        "not",
        "null",
        "nulls",
        "numeric",
        "numeric-edited",
        "object",
        "object-computer",
        "occurs",
        "of",
        "off",
        "omitted",
        "on",
        "open",
        "optional",
        "or",
        "order",
        "organization",
        "other",
        "output",
        "overflow",
        "override",
        "packed-decimal",
        "padding",
        "page",
        "password",
        "perform",
        "pic",
        "picture",
        "pointer",
        "pointer-32",
        "position",
        "positive",
        "procedure",
        "procedure-pointer",
        "procedures",
        "proceed",
        "processing",
        "program",
        "program-id",
        "quote",
        "quotes",
        "random",
        "read",
        "ready",
        "record",
        "recording",
        "records",
        "recursive",
        "redefines",
        "reel",
        "reference",
        "references",
        "relative",
        "release",
        "reload",
        "remainder",
        "removal",
        "renames",
        "replace",
        "replacing",
        "repository",
        "rerun",
        "reserve",
        "reset",
        "return",
        "return-code",
        "returning",
        "reversed",
        "rewind",
        "rewrite",
        "right",
        "rounded",
        "run",
        "same",
        "sd",
        "search",
        "section",
        "security",
        "segment-limit",
        "select",
        "self",
        "sentence",
        "separate",
        "sequence",
        "sequential",
        "service",
        "set",
        "shift-in",
        "shift-out",
        "sign",
        "size",
        "skip1",
        "skip2",
        "skip3",
        "sort",
        "sort-control",
        "sort-core-size",
        "sort-file-size",
        "sort-merge",
        "sort-message",
        "sort-mode-size",
        "sort-return",
        "source-computer",
        "space",
        "spaces",
        "special-names",
        "sql",
        "sqlims",
        "standard",
        "standard-1",
        "standard-2",
        "start",
        "status",
        "stop",
        "string",
        "subtract",
        "super",
        "suppress",
        "symbolic",
        "sync",
        "synchronized",
        "tally",
        "tallying",
        "tape",
        "test",
        "than",
        "then",
        "through",
        "thru",
        "time",
        "times",
        "title",
        "to",
        "top",
        "trace",
        "trailing",
        "true",
        "type",
        "unit",
        "unstring",
        "until",
        "up",
        "upon",
        "usage",
        "use",
        "using",
        "utf-8",
        "value",
        "values",
        "varying",
        "volatile",
        "when",
        "when-compiled",
        "with",
        "words",
        "working-storage",
        "write",
        "write-only",
        "xml",
        "xml-code",
        "xml-event",
        "xml-information",
        "xml-namespace",
        "xml-namespace-prefix",
        "xml-nnamespace",
        "xml-nnamespace-prefix",
        "xml-ntext",
        "xml-schema",
        "xml-text",
        "zero",
        "zeroes",
        "zeros",
    ],
    standard_only_words: &[
        "cd",
        "cf",
        "ch",
        "clock-units",
        "column",
        "communication",
        "control",
        "controls",
        "de",
        "destination",
        "detail",
        "disable",
        "egi",
        "emi",
        "enable",
        "end-receive",
        "esi",
        "final",
        "group",
        "heading",
        "indicate",
        "initiate",
        "last",
        "limits",
        "line-counter",
        "message",
        "number",
        "page-counter",
        "pf",
        "ph",
        "plus",
        "printing",
        "purge",
        "queue",
        "rd",
        "receive",
        "report",
        "reporting",
        "reports",
        "rf",
        "rh",
        "segment",
        "send",
        "source",
        "sub-queue-1",
        "sub-queue-2",
        "sub-queue-3",
        "sum",
        "table",
        "terminal",
        "terminate",
        "text",
    ],
    potential_reserved_words: &[
        "active-class",
        "aligned",
        "anycase",
        "b-and",
        "b-not",
        "b-or",
        "b-xor",
        "based",
        "binary-char",
        "binary-double",
        "binary-long",
        "binary-short",
        "bit",
        "boolean",
        "col",
        "cols",
        "columns",
        "condition",
        "constant",
        "crt",
        "cursor",
        "data-pointer",
        "ec",
        "end-accept",
        "end-display",
        "eo",
        "exception-object",
        "float-extended",
        "float-long",
        "float-short",
        "format",
        "function-id",
        "get",
        "interface",
        "interface-id",
        "locale",
        "minus",
        "nested",
        "object-reference",
        "options",
        "pointer-24",
        "pointer-31",
        "pointer-64",
        "present",
        "program-pointer",
        "property",
        "prototype",
        "raise",
        "raising",
        "resume",
        "retry",
        "screen",
        "sharing",
        "sources",
        "system-default",
        "typedef",
        "universal",
        "unlock",
        "user-default",
        "val-status",
        "valid",
        "validate",
        "validate-status",
    ],
    contextual_keywords: &[
        "byte-length",
        "compat",
        "cycle",
        "dll",
        "entry-interface",
        "entry-name",
        "fixed",
        "initialized",
        "intrinsic",
        "loc",
        "longmixed",
        "longupper",
        "name",
        "paragraph",
        "recursive",
        "yyyyddd",
        "yyyymmdd",
    ],
    literals: &[],
    tokens: &["ERROR", "IDENT", "WHITESPACE", "COMMENT", "DEBUG"],
    nodes: &[],
};

//#[derive(Default, Debug)]
//pub(crate) struct AstSrc {
//    pub(crate) tokens: Vec<String>,
//    pub(crate) nodes: Vec<AstNodeSrc>,
//    pub(crate) enums: Vec<AstEnumSrc>,
//}
//
//#[derive(Debug)]
//pub(crate) struct AstNodeSrc {
//    pub(crate) doc: Vec<String>,
//    pub(crate) name: String,
//    pub(crate) traits: Vec<String>,
//    pub(crate) fields: Vec<Field>,
//}
//
//#[derive(Debug, Eq, PartialEq)]
//pub(crate) enum Field {
//    Token(String),
//    Node {
//        name: String,
//        ty: String,
//        cardinality: Cardinality,
//    },
//}
//
//#[derive(Debug, Eq, PartialEq)]
//pub(crate) enum Cardinality {
//    Optional,
//    Many,
//}
//
//#[derive(Debug)]
//pub(crate) struct AstEnumSrc {
//    pub(crate) doc: Vec<String>,
//    pub(crate) name: String,
//    pub(crate) traits: Vec<String>,
//    pub(crate) variants: Vec<String>,
//}
