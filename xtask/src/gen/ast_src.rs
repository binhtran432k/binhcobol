//! Defines input for code generation process.

pub(crate) struct KindsSrc<'a> {
    pub(crate) punct: &'a [(&'a str, &'a str)],
    pub(crate) reserved_words: &'a [&'a str],
    pub(crate) standard_only_words: &'a [&'a str],
    pub(crate) potential_reserved_words: &'a [&'a str],
    pub(crate) contextual_keywords: &'a [&'a str],
    pub(crate) literals: &'a [&'a str],
    pub(crate) tokens: &'a [&'a str],
    pub(crate) nodes: &'a [&'a str],
}

pub(crate) const KINDS_SRC: KindsSrc<'_> = KindsSrc {
    punct: &[
        ("+", "PLUS"),
        ("-", "MINUS"),
        ("*", "STAR"),
        ("**", "STAR2"),
        ("/", "SLASH"),
        ("=", "EQ"),
        ("==", "EQ2"),
        ("<=", "LTEQ"),
        (">=", "GTEQ"),
        ("<>", "LTGT"),
        ("*>", "STAR_GT"),
        (">>", "GTGT"),
        ("$", "DOLLAR"),
        (",", "COMMA"),
        (";", "SEMICOLON"),
        (".", "DOT"),
        ("(", "L_PAREN"),
        (")", "R_PAREN"),
        ("<", "L_ANGLE"),
        (">", "R_ANGLE"),
        (":", "COLON"),
    ],
    reserved_words: &[
        "ACCEPT",
        "ACCESS",
        "ADD",
        "ADDRESS",
        "ADVANCING",
        "AFTER",
        "ALL",
        "ALLOCATE",
        "ALPHABET",
        "ALPHABETIC",
        "ALPHABETIC-LOWER",
        "ALPHABETIC-UPPER",
        "ALPHANUMERIC",
        "ALPHANUMERIC-EDITED",
        "ALSO",
        "ALTER",
        "ALTERNATE",
        "AND",
        "ANY",
        "APPLY",
        "ARE",
        "AREA",
        "AREAS",
        "ASCENDING",
        "ASSIGN",
        "AT",
        "AUTHOR",
        "BASIS",
        "BEFORE",
        "BEGINNING",
        "BINARY",
        "BLANK",
        "BLOCK",
        "BOTTOM",
        "BY",
        "BYTE-LENGTH",
        "CALL",
        "CANCEL",
        "CBL",
        "CHARACTER",
        "CHARACTERS",
        "CLASS",
        "CLASS-ID",
        "CLOSE",
        "COBOL",
        "CODE",
        "CODE-SET",
        "COLLATING",
        "COM-REG",
        "COMMA",
        "COMMON",
        "COMP",
        "COMP-1",
        "COMP-2",
        "COMP-3",
        "COMP-4",
        "COMP-5",
        "COMPUTATIONAL",
        "COMPUTATIONAL-1",
        "COMPUTATIONAL-2",
        "COMPUTATIONAL-3",
        "COMPUTATIONAL-4",
        "COMPUTATIONAL-5",
        "COMPUTE",
        "CONFIGURATION",
        "CONTAINS",
        "CONTENT",
        "CONTINUE",
        "CONVERTING",
        "COPY",
        "CORR",
        "CORRESPONDING",
        "COUNT",
        "CURRENCY",
        "DATA",
        "DATE",
        "DATE-COMPILED",
        "DATE-WRITTEN",
        "DAY",
        "DAY-OF-WEEK",
        "DBCS",
        "DEBUG-CONTENTS",
        "DEBUG-ITEM",
        "DEBUG-LINE",
        "DEBUG-NAME",
        "DEBUG-SUB-1",
        "DEBUG-SUB-2",
        "DEBUG-SUB-3",
        "DEBUGGING",
        "DECIMAL-POINT",
        "DECLARATIVES",
        "DEFAULT",
        "DELETE",
        "DELIMITED",
        "DELIMITER",
        "DEPENDING",
        "DESCENDING",
        "DISPLAY",
        "DISPLAY-1",
        "DIVIDE",
        "DIVISION",
        "DOWN",
        "DUPLICATES",
        "DYNAMIC",
        "EGCS",
        "EJECT",
        "ELSE",
        "END",
        "END-ADD",
        "END-CALL",
        "END-COMPUTE",
        "END-DELETE",
        "END-DIVIDE",
        "END-EVALUATE",
        "END-EXEC",
        "END-IF",
        "END-INVOKE",
        "END-JSON",
        "END-MULTIPLY",
        "END-OF-PAGE",
        "END-PERFORM",
        "END-READ",
        "END-RETURN",
        "END-REWRITE",
        "END-SEARCH",
        "END-START",
        "END-STRING",
        "END-SUBTRACT",
        "END-UNSTRING",
        "END-WRITE",
        "END-XML",
        "ENDING",
        "ENTER",
        "ENTRY",
        "ENVIRONMENT",
        "EOP",
        "EQUAL",
        "ERROR",
        "EVALUATE",
        "EVERY",
        "EXCEPTION",
        "EXEC",
        "EXECUTE",
        "EXIT",
        "EXTEND",
        "EXTERNAL",
        "FACTORY",
        "FALSE",
        "FD",
        "FILE",
        "FILE-CONTROL",
        "FILLER",
        "FIRST",
        "FOOTING",
        "FOR",
        "FREE",
        "FROM",
        "FUNCTION",
        "FUNCTION-POINTER",
        "GENERATE",
        "GIVING",
        "GLOBAL",
        "GO",
        "GOBACK",
        "GREATER",
        "GROUP-USAGE",
        "HIGH-VALUE",
        "HIGH-VALUES",
        "I-O",
        "I-O-CONTROL",
        "ID",
        "IDENTIFICATION",
        "IF",
        "IN",
        "INDEX",
        "INDEXED",
        "INHERITS",
        "INITIAL",
        "INITIALIZE",
        "INPUT",
        "INPUT-OUTPUT",
        "INSERT",
        "INSPECT",
        "INSTALLATION",
        "INTO",
        "INVALID",
        "INVOKE",
        "IS",
        "JAVA",
        "JNIENVPTR",
        "JSON",
        "JSON-CODE",
        "JSON-STATUS",
        "JUST",
        "JUSTIFIED",
        "KANJI",
        "KEY",
        "LABEL",
        "LEADING",
        "LEFT",
        "LENGTH",
        "LESS",
        "LIMIT",
        "LINAGE",
        "LINAGE-COUNTER",
        "LINE",
        "LINES",
        "LINKAGE",
        "LOCAL-STORAGE",
        "LOCK",
        "LOW-VALUE",
        "LOW-VALUES",
        "MEMORY",
        "MERGE",
        "METHOD",
        "METHOD-ID",
        "MODE",
        "MODULES",
        "MORE-LABELS",
        "MOVE",
        "MULTIPLE",
        "MULTIPLY",
        "NATIONAL",
        "NATIONAL-EDITED",
        "NATIVE",
        "NEGATIVE",
        "NEXT",
        "NO",
        "NOT",
        "NULL",
        "NULLS",
        "NUMERIC",
        "NUMERIC-EDITED",
        "OBJECT",
        "OBJECT-COMPUTER",
        "OCCURS",
        "OF",
        "OFF",
        "OMITTED",
        "ON",
        "OPEN",
        "OPTIONAL",
        "OR",
        "ORDER",
        "ORGANIZATION",
        "OTHER",
        "OUTPUT",
        "OVERFLOW",
        "OVERRIDE",
        "PACKED-DECIMAL",
        "PADDING",
        "PAGE",
        "PASSWORD",
        "PERFORM",
        "PIC",
        "PICTURE",
        "POINTER",
        "POINTER-32",
        "POSITION",
        "POSITIVE",
        "PROCEDURE",
        "PROCEDURE-POINTER",
        "PROCEDURES",
        "PROCEED",
        "PROCESSING",
        "PROGRAM",
        "PROGRAM-ID",
        "QUOTE",
        "QUOTES",
        "RANDOM",
        "READ",
        "READY",
        "RECORD",
        "RECORDING",
        "RECORDS",
        "RECURSIVE",
        "REDEFINES",
        "REEL",
        "REFERENCE",
        "REFERENCES",
        "RELATIVE",
        "RELEASE",
        "RELOAD",
        "REMAINDER",
        "REMOVAL",
        "RENAMES",
        "REPLACE",
        "REPLACING",
        "REPOSITORY",
        "RERUN",
        "RESERVE",
        "RESET",
        "RETURN",
        "RETURN-CODE",
        "RETURNING",
        "REVERSED",
        "REWIND",
        "REWRITE",
        "RIGHT",
        "ROUNDED",
        "RUN",
        "SAME",
        "SD",
        "SEARCH",
        "SECTION",
        "SECURITY",
        "SEGMENT-LIMIT",
        "SELECT",
        "SELF",
        "SENTENCE",
        "SEPARATE",
        "SEQUENCE",
        "SEQUENTIAL",
        "SERVICE",
        "SET",
        "SHIFT-IN",
        "SHIFT-OUT",
        "SIGN",
        "SIZE",
        "SKIP1",
        "SKIP2",
        "SKIP3",
        "SORT",
        "SORT-CONTROL",
        "SORT-CORE-SIZE",
        "SORT-FILE-SIZE",
        "SORT-MERGE",
        "SORT-MESSAGE",
        "SORT-MODE-SIZE",
        "SORT-RETURN",
        "SOURCE-COMPUTER",
        "SPACE",
        "SPACES",
        "SPECIAL-NAMES",
        "SQL",
        "SQLIMS",
        "STANDARD",
        "STANDARD-1",
        "STANDARD-2",
        "START",
        "STATUS",
        "STOP",
        "STRING",
        "SUBTRACT",
        "SUPER",
        "SUPPRESS",
        "SYMBOLIC",
        "SYNC",
        "SYNCHRONIZED",
        "TALLY",
        "TALLYING",
        "TAPE",
        "TEST",
        "THAN",
        "THEN",
        "THROUGH",
        "THRU",
        "TIME",
        "TIMES",
        "TITLE",
        "TO",
        "TOP",
        "TRACE",
        "TRAILING",
        "TRUE",
        "TYPE",
        "UNIT",
        "UNSTRING",
        "UNTIL",
        "UP",
        "UPON",
        "USAGE",
        "USE",
        "USING",
        "UTF-8",
        "VALUE",
        "VALUES",
        "VARYING",
        "VOLATILE",
        "WHEN",
        "WHEN-COMPILED",
        "WITH",
        "WORDS",
        "WORKING-STORAGE",
        "WRITE",
        "WRITE-ONLY",
        "XML",
        "XML-CODE",
        "XML-EVENT",
        "XML-INFORMATION",
        "XML-NAMESPACE",
        "XML-NAMESPACE-PREFIX",
        "XML-NNAMESPACE",
        "XML-NNAMESPACE-PREFIX",
        "XML-NTEXT",
        "XML-SCHEMA",
        "XML-TEXT",
        "ZERO",
        "ZEROES",
        "ZEROS",
    ],
    standard_only_words: &[
        "CD",
        "CF",
        "CH",
        "CLOCK-UNITS",
        "COLUMN",
        "COMMUNICATION",
        "CONTROL",
        "CONTROLS",
        "DE",
        "DESTINATION",
        "DETAIL",
        "DISABLE",
        "EGI",
        "EMI",
        "ENABLE",
        "END-RECEIVE",
        "ESI",
        "FINAL",
        "GROUP",
        "HEADING",
        "INDICATE",
        "INITIATE",
        "LAST",
        "LIMITS",
        "LINE-COUNTER",
        "MESSAGE",
        "NUMBER",
        "PAGE-COUNTER",
        "PF",
        "PH",
        "PLUS",
        "PRINTING",
        "PURGE",
        "QUEUE",
        "RD",
        "RECEIVE",
        "REPORT",
        "REPORTING",
        "REPORTS",
        "RF",
        "RH",
        "SEGMENT",
        "SEND",
        "SOURCE",
        "SUB-QUEUE-1",
        "SUB-QUEUE-2",
        "SUB-QUEUE-3",
        "SUM",
        "TABLE",
        "TERMINAL",
        "TERMINATE",
        "TEXT",
    ],
    potential_reserved_words: &[
        "ACTIVE-CLASS",
        "ALIGNED",
        "ANYCASE",
        "B-AND",
        "B-NOT",
        "B-OR",
        "B-XOR",
        "BASED",
        "BINARY-CHAR",
        "BINARY-DOUBLE",
        "BINARY-LONG",
        "BINARY-SHORT",
        "BIT",
        "BOOLEAN",
        "COL",
        "COLS",
        "COLUMNS",
        "CONDITION",
        "CONSTANT",
        "CRT",
        "CURSOR",
        "DATA-POINTER",
        "EC",
        "END-ACCEPT",
        "END-DISPLAY",
        "EO",
        "EXCEPTION-OBJECT",
        "FLOAT-EXTENDED",
        "FLOAT-LONG",
        "FLOAT-SHORT",
        "FORMAT",
        "FUNCTION-ID",
        "GET",
        "INTERFACE",
        "INTERFACE-ID",
        "LOCALE",
        "MINUS",
        "NESTED",
        "OBJECT-REFERENCE",
        "OPTIONS",
        "POINTER-24",
        "POINTER-31",
        "POINTER-64",
        "PRESENT",
        "PROGRAM-POINTER",
        "PROPERTY",
        "PROTOTYPE",
        "RAISE",
        "RAISING",
        "RESUME",
        "RETRY",
        "SCREEN",
        "SHARING",
        "SOURCES",
        "SYSTEM-DEFAULT",
        "TYPEDEF",
        "UNIVERSAL",
        "UNLOCK",
        "USER-DEFAULT",
        "VAL-STATUS",
        "VALID",
        "VALIDATE",
        "VALIDATE-STATUS",
    ],
    contextual_keywords: &[
        // "BYTE-LENGTH",
        "COMPAT",
        "CYCLE",
        "DLL",
        "ENTRY-INTERFACE",
        "ENTRY-NAME",
        "FIXED",
        "INITIALIZED",
        "INTRINSIC",
        "LOC",
        "LONGMIXED",
        "LONGUPPER",
        "NAME",
        "PARAGRAPH",
        // "RECURSIVE",
        "YYYYDDD",
        "YYYYMMDD",
    ],
    literals: &["STRING", "INT_NUMBER", "FLOAT_NUMBER", "HEX_STRING"],
    tokens: &[
        "ERROR",
        "IDENT",
        "NUMBER_IDENT",
        "WHITESPACE",
        "SEQUENCE_NUMBER_AREA",
        "INDICATOR_AREA",
        "PROGRAM_IDENTIFICATION_AREA",
        "COMMENT_AREA",
        "DEBUG_AREA",
        "CONTINUE_LINE_AREA",
        "INVALID_AREA",
        "COMMENT",
        "DEBUG",
    ],
    nodes: &["SOURCE_FILE"],
};

//#[derive(Default, Debug)]
//pub(crate) struct AstSrc {
//    pub(crate) tokens: Vec<String>,
//    pub(crate) nodes: Vec<AstNodeSrc>,
//    pub(crate) enums: Vec<AstEnumSrc>,
//}
//
//#[derive(Debug)]
//pub(crate) struct AstNodeSrc {
//    pub(crate) doc: Vec<String>,
//    pub(crate) name: String,
//    pub(crate) traits: Vec<String>,
//    pub(crate) fields: Vec<Field>,
//}
//
//#[derive(Debug, Eq, PartialEq)]
//pub(crate) enum Field {
//    Token(String),
//    Node {
//        name: String,
//        ty: String,
//        cardinality: Cardinality,
//    },
//}
//
//#[derive(Debug, Eq, PartialEq)]
//pub(crate) enum Cardinality {
//    Optional,
//    Many,
//}
//
//#[derive(Debug)]
//pub(crate) struct AstEnumSrc {
//    pub(crate) doc: Vec<String>,
//    pub(crate) name: String,
//    pub(crate) traits: Vec<String>,
//    pub(crate) variants: Vec<String>,
//}
